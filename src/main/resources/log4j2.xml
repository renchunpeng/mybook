<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="ERROR" monitorInterval="30">
  <Properties>
    <Property name="log.level.console">DEBUG</Property>
    <Property name="log.level.action">INFO</Property>
    <Property name="log.path">../../log/mybook</Property>
    <Property name="project.name">mybook</Property>
    <Property name="log.prefix">mybook</Property>
    <Property name="log.file.patternLayout">[%d{yyyy-MM-dd HH:mm:ss,SSS}] %5p ${log.prefix} %l - %m%n</Property>
    <Property name="log.costRollingFile.patternLayout">%m%n</Property>
    <Property name="log.rollingFile.patternLayout">[%d{yyyy-MM-dd HH:mm:ss,SSS}] %5p ${log.prefix} %l - %m%n</Property>
    <Property name="log.console.patternLayout">[%d{yyyy-MM-dd HH:mm:ss,SSS}] %highlight{%5p} %-5tid [%style{%-15.15t}{yellow}] [%style{%-30.30c{1.}}{Bright,Cyan}] - %m%n</Property>
    <Property name="log.filePattern">${log.path}/$${date:yyyy-MM-dd}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz</Property>
  </Properties>

  <Appenders>
    <!--这个输出控制台的配置 -->
    <Console name="CONSOLE" target="SYSTEM_OUT">
      <!--其实这行控制可以不用，控制台给什么输出什么就行，可能为了方便看报错信息吧-->
      <ThresholdFilter level="${sys:log.level.console}" onMatch="ACCEPT"
        onMismatch="DENY"/>
      <PatternLayout
        pattern="${log.console.patternLayout}"/>
    </Console>

    <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
    <!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
    <File name="FILE" fileName="${log.path}/${project.name}-action.log" append="false">
      <PatternLayout
        pattern="${log.file.patternLayout}"/>
    </File>
    <RollingFile name="ROLLING_FILE_DEBUG" fileName="${log.path}/${project.name}-debug.log"
      filePattern="${log.path}/$${date:yyyy-MM-dd}/${project.name}-debug-%d{yyyy-MM-dd}-%i.log.gz">
      <Filters>
        <ThresholdFilter level="debug"/>
        <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <PatternLayout
        pattern="${log.rollingFile.patternLayout}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="128 MB"/>
      </Policies>
      <!--日志保留时长-->
      <DefaultRolloverStrategy max="7">
        <Delete basePath="${LOG_HOME}/$${date:yyyy-MM}/" maxDepth="2">
          <IfFileName glob="*.log" />
          <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
          另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
          <!--7天-->
          <IfLastModified age="168H" />
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>
    <RollingFile name="ROLLING_FILE_INFO" fileName="${log.path}/${project.name}-info.log"
      filePattern="${log.path}/$${date:yyyy-MM-dd}/${project.name}-info-%d{yyyy-MM-dd}-%i.log.gz">
      <Filters>
        <ThresholdFilter level="INFO"/>
        <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <PatternLayout
        pattern="${log.rollingFile.patternLayout}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="128 MB"/>
      </Policies>
            <DefaultRolloverStrategy max="7">
        <Delete basePath="${LOG_HOME}/$${date:yyyy-MM}/" maxDepth="2">
          <IfFileName glob="*.log" />
          <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
          另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
          <!--7天-->
          <IfLastModified age="168H" />
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>
    <RollingFile name="ROLLING_FILE_WARN" fileName="${log.path}/${project.name}-warn.log"
      filePattern="${log.path}/$${date:yyyy-MM-dd}/${project.name}-warn-%d{yyyy-MM-dd}-%i.log.gz">
      <Filters>
        <ThresholdFilter level="WARN"/>
        <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
      </Filters>
      <PatternLayout
        pattern="${log.rollingFile.patternLayout}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="128 MB"/>
      </Policies>
            <DefaultRolloverStrategy max="7">
        <Delete basePath="${LOG_HOME}/$${date:yyyy-MM}/" maxDepth="2">
          <IfFileName glob="*.log" />
          <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
          另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
          <!--7天-->
          <IfLastModified age="168H" />
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>
    <RollingFile name="ROLLING_FILE_ERROR" fileName="${log.path}/${project.name}-error.log"
      filePattern="${log.path}/$${date:yyyy-MM-dd}/${project.name}-error-%d{yyyy-MM-dd}-%i.log.gz">
      <Filters>
        <ThresholdFilter level="ERROR"/>
      </Filters>
      <PatternLayout
        pattern="${log.rollingFile.patternLayout}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="128 MB"/>
      </Policies>
            <DefaultRolloverStrategy max="7">
        <Delete basePath="${LOG_HOME}/$${date:yyyy-MM}/" maxDepth="2">
          <IfFileName glob="*.log" />
          <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
          另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
          <!--7天-->
          <IfLastModified age="168H" />
        </Delete>
      </DefaultRolloverStrategy>
    </RollingFile>

    <RollingFile name="TIME_COST_ROLLING_FILE" fileName="${log.path}/${project.name}-cost.log"
      filePattern="${log.path}/$${date:yyyy-MM-dd}/${project.name}-cost-%d{yyyy-MM-dd}-%i.log.gz">
      <Filters>
        <ThresholdFilter level="INFO"/>
      </Filters>
      <PatternLayout
        pattern="${log.costRollingFile.patternLayout}"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
        <SizeBasedTriggeringPolicy size="128 MB"/>
      </Policies>
      <DefaultRolloverStrategy max="200"/>
    </RollingFile>

  </Appenders>
  <!--然后定义 loggers，只有定义了loggers并引入的appender，appender才会生效-->
  <!-- 指定项目的根日志，如果没有单独指定 Logger，那么默认使用该 Root 日志输出 -->
  <Loggers>
    <!-- 配置日志的根节点，根节点日志级别为 WARN 时只有 WARN 及以上日志会被打印-->
    <Root level="INFO">
      <!-- Root 的子节点，用来指定该日志输出到哪个 Appender。-->
      <AppenderRef ref="CONSOLE"/>
      <AppenderRef ref="FILE"/>
      <AppenderRef ref="ROLLING_FILE_DEBUG"/>
      <AppenderRef ref="ROLLING_FILE_INFO"/>
      <AppenderRef ref="ROLLING_FILE_WARN"/>
      <AppenderRef ref="ROLLING_FILE_ERROR"/>
    </Root>
    <!-- 个性化配置第三方日志系统，这里设置的等级会覆盖root的等级，比如org.mybatis设置为DEBUG就会把所有的debug信息都传入root -->
    <!-- 用来单独指定日志的形式。可以理解为过滤一些日志信息，这样即使root设置为debug也不会打印太多无效日志 -->
    <!-- 控制sql的打印 -->
    <Logger name="com.rencp.mybook.mapper" level="DEBUG" />
    <!-- org.springframework 输出 WARN 及以上级别日志 -->
    <Logger name="org.springframework" level="WARN"/>
    <!-- org.mybatis 输出 DEBUG 及以上级别日志，方便调试 SQL -->
    <Logger name="org.mybatis" level="INFO"/>
    <!-- org.springframework.boot 输出 INFO 及以上级别日志 -->
    <Logger name="org.springframework.boot" level="INFO"/>
    <Logger name="AccessLog" additivity="TRUE" level="INFO">
      <AppenderRef ref="TIME_COST_ROLLING_FILE" level="ALL" />
    </Logger>
  </Loggers>
</Configuration>
